<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>CMAKE</title>
    <url>/2022/08/21/cmake/</url>
    <content><![CDATA[<h1 id="CMAKE"><a href="#CMAKE" class="headerlink" title="CMAKE"></a>CMAKE</h1><blockquote>
<p>官网 : <a href="https://cmake.org/cmake/help/v3.15/">https://cmake.org/cmake/help/v3.15/</a></p>
</blockquote>
<blockquote>
<ol>
<li>编辑CMakeLists.txt </li>
<li>mkdir build; cd build</li>
<li>cmake ..</li>
<li>make</li>
</ol>
</blockquote>
<h2 id="通用格式"><a href="#通用格式" class="headerlink" title="通用格式"></a>通用格式</h2><ol>
<li><p>cmake要求最低版本(选择性添加)</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">cmake_minimum_required(VERSION <span class="number">3.0</span><span class="number">.0</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>编译工程名</p>
</li>
</ol>
   <figure class="highlight c"><table><tr><td class="code"><pre><span class="line">project(xxx)</span><br><span class="line"><span class="comment">//会自动创建两个变量，PROJECT_SOURCE_DIR和PROJECT_NAME</span></span><br><span class="line"><span class="comment">//$&#123;PROJECT_SOURCE_DIR&#125;：本CMakeLists.txt所在的文件夹路径</span></span><br><span class="line"><span class="comment">//$&#123;PROJECT_NAME&#125;：本CMakeLists.txt的project名称</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li>打印信息</li>
</ol>
   <figure class="highlight c"><table><tr><td class="code"><pre><span class="line">message() 			<span class="comment">//直接添加打印的内容和变量即可,不需要双引号</span></span><br><span class="line">message(<span class="string">&quot;PROJECT_SOURCE_DIR = $&#123;PROJECT_SOURCE_DIR&#125;&quot;</span>)</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>给部分文件或路径组合起别名, 通过${变量}获取变量内容</li>
</ol>
   <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="built_in">set</span>(变量 文件名/路径/...)</span><br></pre></td></tr></table></figure>

<ol start="5">
<li>设置c &#x2F; c++ 编译编译参数</li>
</ol>
   <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="built_in">set</span> (CMAKE_C_FLAGS -Wall -O2)</span><br><span class="line"><span class="built_in">set</span> (CMAKE_CXX_FLAGS -Wall -<span class="built_in">std</span>=C++<span class="number">11</span>)</span><br><span class="line">add_compile_options( -Wall )				<span class="comment">//该命令译选项是针对所有编译器的(包括c和c++编译器)</span></span><br></pre></td></tr></table></figure>

<ol start="6">
<li>为当前路径以及子目录的源文件加入由-D引入的define flag</li>
</ol>
   <figure class="highlight c"><table><tr><td class="code"><pre><span class="line">add_definitions(-DFOO -DDEBUG ...)</span><br></pre></td></tr></table></figure>

<ol start="7">
<li>对子文件夹进行cmake编译</li>
</ol>
   <figure class="highlight c"><table><tr><td class="code"><pre><span class="line">add_subdirectory(子文件夹名) </span><br></pre></td></tr></table></figure>

<ol start="8">
<li></li>
<li></li>
<li><p>帮助信息 </p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span> 查看cmake默认变量		cmake --help-variable-<span class="built_in">list</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="判断语句"><a href="#判断语句" class="headerlink" title="判断语句"></a>判断语句</h2><ol>
<li><p>STREQUAL</p>
<p>用法 : 比较字符串, 相同返回true</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> *路径 smartpen-x2500/packages/Sample/Dual_mic_phase_based_speech_enhancement/src/fft/CmakeLists.txt</span></span><br><span class="line"><span class="comment"> *其中的&quot;CPU_PLATFORM&quot;是在外面定义的,本例中定义在smartpen/device/knot/knot_base.mk</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">if</span> (CPU_PLATFORM STREQUAL <span class="string">&quot;knot&quot;</span>)</span><br><span class="line">add_library(ne10_fft STATIC NE10_fft.c  NE10_fft_generic_float32.c  NE10_rfft_float32.c NE10_rfft_float32_mxu.c)</span><br><span class="line"><span class="keyword">else</span>()</span><br><span class="line">add_library(ne10_fft STATIC NE10_fft.c  NE10_fft_generic_float32.c  NE10_rfft:w_float32.c)</span><br><span class="line">endif()  </span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="链接-x2F-头文件"><a href="#链接-x2F-头文件" class="headerlink" title="链接&#x2F;头文件"></a>链接&#x2F;头文件</h2><h3 id="头文件链接动态静态库"><a href="#头文件链接动态静态库" class="headerlink" title="头文件链接动态静态库"></a>头文件链接动态静态库</h3><ol>
<li><p>添加头文件的查找路径, 相当于命令行的  <em><strong>-l</strong></em> 参数</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">include_directories(../../../thirdparty/comm/include)</span><br></pre></td></tr></table></figure>
</li>
<li><p>添加需要链接的库文件目录, 相当于命令行 <em><strong>-L</strong></em> 参数</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">link_directories(<span class="string">&quot;/home/server/third/lib&quot;</span>)</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="将目标文件与库链接"><a href="#将目标文件与库链接" class="headerlink" title="将目标文件与库链接"></a>将目标文件与库链接</h3><ol>
<li><p>target_link_libraries</p>
<p>作用 :  将目标文件与库文件进行链接。该指令的语法如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">target_link_libraries(&lt;target&gt; [item1] [item2] [...]</span><br><span class="line">[[debug|optimized|general] &lt;item&gt;] ...)</span><br><span class="line"> </span><br><span class="line"><span class="comment">//上述指令中的&lt;target&gt;是指通过add_executable()和add_library()指令生成已经创建的目标文件。而[item]表示库文件没有后缀的名字。默认情况下，库依赖项是传递的。当这个目标链接到另一个目标时，链接到这个目标的库也会出现在另一个目标的连接线上。这个传递的接口存储在interface_link_libraries的目标属性中，可以通过设置该属性直接重写传递接口。</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="编译目标"><a href="#编译目标" class="headerlink" title="编译目标"></a>编译目标</h2><ol>
<li><p>编译二进制文件</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">add_executable(目标文件名字xxx 源文件)</span><br><span class="line">add_executable($&#123;PROJECT_NAME&#125; example_person.cpp)</span><br></pre></td></tr></table></figure>
</li>
<li><p>编译动态 &#x2F; 静态库</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">add_library(库文件名称xxx SHARED/STATIC 文件)				<span class="comment">//生成的库自动补全,如libxxx.so </span></span><br></pre></td></tr></table></figure>
</li>
<li><p>add_library() 用法</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//作用 : 将指定的源文件生成链接文件，然后添加到工程中去。该指令常用的语法如下：</span></span><br><span class="line"></span><br><span class="line">add_library(&lt;name&gt; [STATIC | SHARED | MODULE]</span><br><span class="line">[EXCLUDE_FROM_ALL]</span><br><span class="line">[source1] [source2] [...])</span><br><span class="line"></span><br><span class="line"><span class="comment">//其中&lt;name&gt;表示库文件的名字，该库文件会根据命令里列出的源文件来创建。而STATIC、SHARED和MODULE的作用是指定生成的库文件的类型。STATIC库是目标文件的归档文件，在链接其它目标的时候使用。SHARED库会被动态链接（动态链接库），在运行时会被加载。MODULE库是一种不会被链接到其它目标中的插件，但是可能会在运行时使用dlopen-系列的函数。默认状态下，库文件将会在于源文件目录树的构建目录树的位置被创建，该命令也会在这里被调用。而语法中的source1 source2分别表示各个源文件</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="INSTALL命令"><a href="#INSTALL命令" class="headerlink" title="INSTALL命令"></a>INSTALL命令</h2><ul>
<li>详情参考：<a href="https://cmake.org/cmake/help/v3.22/command/install.html">https://cmake.org/cmake/help/v3.22/command/install.html</a></li>
<li>作用：用于定义安装规则，安装内容包括可执行文件，静态库，动态库以及文件，目录，脚本等</li>
<li>使用方法：make install</li>
<li>目标路径：${CMAKE_INSTALL_PREFIX}指定，默认&#x2F;usr&#x2F;local</li>
</ul>
<h3 id="目标文件安装"><a href="#目标文件安装" class="headerlink" title="目标文件安装"></a>目标文件安装</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">install(TARGETS targets... [EXPORT &lt;export-name&gt;]</span><br><span class="line">        [RUNTIME_DEPENDENCIES args...|RUNTIME_DEPENDENCY_SET &lt;<span class="built_in">set</span>-name&gt;]</span><br><span class="line">        [[ARCHIVE|LIBRARY|RUNTIME|OBJECTS|FRAMEWORK|BUNDLE|</span><br><span class="line">          PRIVATE_HEADER|PUBLIC_HEADER|RESOURCE]</span><br><span class="line">         [DESTINATION &lt;dir&gt;]</span><br><span class="line">         [PERMISSIONS permissions...]</span><br><span class="line">         [CONFIGURATIONS [Debug|Release|...]]</span><br><span class="line">         [COMPONENT &lt;component&gt;]</span><br><span class="line">         [NAMELINK_COMPONENT &lt;component&gt;]</span><br><span class="line">         [OPTIONAL] [EXCLUDE_FROM_ALL]</span><br><span class="line">         [NAMELINK_ONLY|NAMELINK_SKIP]</span><br><span class="line">        ] [...]</span><br><span class="line">        [INCLUDES DESTINATION [&lt;dir&gt; ...]]</span><br><span class="line">        )</span><br><span class="line">        </span><br><span class="line"><span class="comment">// example:</span></span><br><span class="line">install(TARGETS mybin mystaiclib mydynamiclib</span><br><span class="line">        RUNTIME DESTINATION bin</span><br><span class="line">        ARCHIVE DESTINATION lib</span><br><span class="line">        LIBRARY DESTINATION lib)</span><br></pre></td></tr></table></figure>
<p>目标文件指的是我们通过 add_executable &#x2F; add_library 得到的二进制文件或者库，只有这些文件才可以通过该命令装载到相应的位置</p>
<ul>
<li>可执行文件：RUNTIME</li>
<li>动态库：LIBRARY</li>
<li>静态库：ARCHIVE</li>
</ul>
<h3 id="普通文件安装"><a href="#普通文件安装" class="headerlink" title="普通文件安装"></a>普通文件安装</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">install(&lt;FILES|PROGRAMS&gt; files...</span><br><span class="line">        TYPE &lt;type&gt; | DESTINATION &lt;dir&gt;</span><br><span class="line">        [PERMISSIONS permissions...]</span><br><span class="line">        [CONFIGURATIONS [Debug|Release|...]]</span><br><span class="line">        [COMPONENT &lt;component&gt;]</span><br><span class="line">        [RENAME &lt;name&gt;] [OPTIONAL] [EXCLUDE_FROM_ALL])</span><br><span class="line">        </span><br><span class="line"><span class="comment">// example</span></span><br><span class="line">install(FILES mylib.h DESTINATION include)</span><br></pre></td></tr></table></figure>
<p>普通文件即需要导出的头文件、依赖的三方库等等，该命令同时可以指定导出文件的权限（默认644）</p>
<h3 id="目录安装"><a href="#目录安装" class="headerlink" title="目录安装"></a>目录安装</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">install(DIRECTORY dirs...</span><br><span class="line">        TYPE &lt;type&gt; | DESTINATION &lt;dir&gt;</span><br><span class="line">        [FILE_PERMISSIONS permissions...]</span><br><span class="line">        [DIRECTORY_PERMISSIONS permissions...]</span><br><span class="line">        [USE_SOURCE_PERMISSIONS] [OPTIONAL] [MESSAGE_NEVER]</span><br><span class="line">        [CONFIGURATIONS [Debug|Release|...]]</span><br><span class="line">        [COMPONENT &lt;component&gt;] [EXCLUDE_FROM_ALL]</span><br><span class="line">        [FILES_MATCHING]</span><br><span class="line">        [[PATTERN &lt;pattern&gt; | REGEX &lt;regex&gt;]</span><br><span class="line">         [EXCLUDE] [PERMISSIONS permissions...]] [...])</span><br><span class="line"></span><br><span class="line"><span class="comment">// example</span></span><br><span class="line">install(DIRECTORY src/ DESTINATION include/myproj  FILES_MATCHING PATTERN <span class="string">&quot;*.h&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>参数介绍：</p>
<ul>
<li>DIRECTORY：后面连接的是所在Source目录的相对路径（结尾是否是”&#x2F;“对拷贝结果有一定影响）</li>
<li>PATTERN：使用正则表达式进行过滤</li>
<li>PERMISSIONS：指定PATTERN过滤后的文件权限。</li>
</ul>
<h3 id="Q-amp-A"><a href="#Q-amp-A" class="headerlink" title="Q&amp;A"></a>Q&amp;A</h3><ol>
<li><p>编译参数添加了-lpthread 参数, 但是还是报undefined reference to &#96;pthread_create’ </p>
<p>A :  需要使用target_link_libraries( target thread) 在这里链接thread库</p>
</li>
<li><p>如果在多级的目录下编译, 始终找不到问题报 undefine的问题 ?</p>
<p>A : 看一下是不是链接的库或目标文件格式不同, 一个c 一个c++ , 这样就会导致找不到符号错误</p>
</li>
<li><p>undefined reference to &#96;typeinfo for xxxBase_class’ ?</p>
<p>基类的构造和析构函数需要加{ };  否则就会报这个问题 </p>
</li>
<li></li>
</ol>
<h1 id="Makefile"><a href="#Makefile" class="headerlink" title="Makefile"></a>Makefile</h1><blockquote>
<p><a href="http://c.biancheng.net/view/7113.html">http://c.biancheng.net/view/7113.html</a></p>
</blockquote>
<h3 id="通配符"><a href="#通配符" class="headerlink" title="通配符"></a>通配符</h3><ul>
<li><table>
<thead>
<tr>
<th>通配符</th>
<th>使用说明</th>
</tr>
</thead>
<tbody><tr>
<td>*</td>
<td>匹配0个或者是任意个字符</td>
</tr>
<tr>
<td>?</td>
<td>匹配任意一个字符</td>
</tr>
<tr>
<td>[]</td>
<td>我们可以指定匹配的字符放在 “[]” 中</td>
</tr>
<tr>
<td>%</td>
<td>匹配任意个字符</td>
</tr>
</tbody></table>
</li>
</ul>
<h3 id="自动化变量"><a href="#自动化变量" class="headerlink" title="自动化变量"></a>自动化变量</h3><table>
<thead>
<tr>
<th>自动化变量</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td>$@</td>
<td align="center">表示规则的目标文件名。如果目标是一个文档文件（Linux 中，一般成 .a 文件为文档文件，也成为静态的库文件），  那么它代表这个文档的文件名。在多目标模式规则中，它代表的是触发规则被执行的文件名。</td>
</tr>
<tr>
<td>$%</td>
<td align="center">当目标文件是一个静态库文件时，代表静态库的一个成员名。</td>
</tr>
<tr>
<td>$&lt;</td>
<td align="center">规则的第一个依赖的文件名。如果是一个目标文件使用隐含的规则来重建，则它代表由隐含规则加入的第一个依赖文件。</td>
</tr>
<tr>
<td>$?</td>
<td align="center">所有比目标文件更新的依赖文件列表，空格分隔。如果目标文件时静态库文件，代表的是库文件（.o 文件）。</td>
</tr>
<tr>
<td>$^</td>
<td align="center">代表的是所有依赖文件列表，使用空格分隔。如果目标是静态库文件，它所代表的只能是所有的库成员（.o 文件）名。  一个文件可重复的出现在目标的依赖中，变量“$^”只记录它的第一次引用的情况。就是说变量“$^”会去掉重复的依赖文件。</td>
</tr>
<tr>
<td>$+</td>
<td align="center">类似“$^”，但是它保留了依赖文件中重复出现的文件。主要用在程序链接时库的交叉引用场合。</td>
</tr>
<tr>
<td>$*</td>
<td align="center">在模式规则和静态模式规则中，代表“茎”。“茎”是目标模式中“%”所代表的部分（当文件名中存在目录时，  “茎”也包含目录部分）。</td>
</tr>
</tbody></table>
<h3 id="特殊函数"><a href="#特殊函数" class="headerlink" title="特殊函数"></a>特殊函数</h3><ol>
<li><p>加前缀函数  ——   addprefix</p>
<p>函数功能：为“NAMES…”中的每一个文件名添加前缀“PREFIX”。参数“NAMES…”是空格分割的文件名序列，将“SUFFIX”添加到此序列的每一个文件名之前。</p>
<p>返回值：以单空格分割的添加了前缀“PREFIX”的文件名序列。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">$(addprefix src/,foo bar)</span><br><span class="line"><span class="comment">//返回值为“src/foo src/bar”</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>过滤器   ——–  filter</p>
</li>
</ol>
<p>   语法：$(filter SUFFIX…,$(SOURCES))</p>
<p>   作用：保留字串 “ $(SOURCES)” 中所有符合模式 “ SUFFIX ” 的单词</p>
<pre><code>   sources := main.c AT.txt
   foo : $(sources)
       cc $(filter %.c,%.s,$(sources)) -o foo
       
</code></pre>
<ol start="3">
<li></li>
</ol>
<h3 id="打印"><a href="#打印" class="headerlink" title="打印"></a>打印</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">$(info SRC = $(SRC))</span><br><span class="line">$(warning INC = $(INC))</span><br><span class="line"><span class="comment">//注意：执行到error会直接stop退出</span></span><br><span class="line">$(error INC = $(INC))</span><br></pre></td></tr></table></figure>





<h1 id="Build-mk"><a href="#Build-mk" class="headerlink" title="Build.mk"></a>Build.mk</h1><p>build.mk是我们自己的manhattan平台自己定义的一系列规则.</p>
<p>LOCAL_MODULE_TAGS : module ,userdebug,eng</p>
<h3 id="规则列表"><a href="#规则列表" class="headerlink" title="规则列表"></a>规则列表</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1. 规则 : 复制单/多个文件</span></span><br><span class="line"><span class="comment">2. 参考样例 : /smartpen-x2500/packages/apps/libdualmic/Build.mk</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">include $(BUILD_PREBUILT)				#添加复制模块prebuild</span><br><span class="line">include $(BUILD_MULTI_PREBUILT)			#多文件复制</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">     </span><br></pre></td></tr></table></figure>



<h3 id="install指令"><a href="#install指令" class="headerlink" title="install指令"></a>install指令</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">install(FILES flie DESTINATION dir_path)     <span class="comment">// 执行make install时，把file拷贝到dir_path</span></span><br><span class="line">install(PROGRAMS file DESTINATION dir_path)  <span class="comment">//执行make install时，把file拷贝到dir_path,并给予file可执行权限</span></span><br></pre></td></tr></table></figure>





<h3 id="基本流程"><a href="#基本流程" class="headerlink" title="基本流程"></a>基本流程</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">LOCAL_PATH := $(call my-dir)	</span><br><span class="line">    <span class="comment">//宏my-dir由Build System提供,返回包含build.mk的目录路径</span></span><br><span class="line">include $(CLEAR_VARS)</span><br><span class="line"> 	<span class="comment">//CLEAR_VARS变量由Build System提供,指向一个指定的Makefile,负责清理很多LOCAL_xxx,例如LOCAL_MODULE,LOCAL_SRC_FILES,LOCAL_STATIC_LIBRARIES等等。但不清理LOCAL_PATH</span></span><br><span class="line">	<span class="comment">//这个清理动作是必须的，因为所有的编译控制文件由同一个GNU Make解析和执行，其变量是全局的。所以清理后才能避免相互影响</span></span><br><span class="line">LOCAL_MODULE    := hello-jni</span><br><span class="line">     <span class="comment">//该模块必须定义,名字必须唯一且不包含空格,build system会自动添加适当的前缀和后缀</span></span><br><span class="line">LOCAL_SRC_FILES := hello-jni.c</span><br><span class="line"> 	 <span class="comment">//LOCAL_SRC_FILES变量必须包含将要打包如模块的C/C++ 源码</span></span><br><span class="line">include $(BUILD_SHARED_LIBRARY)</span><br><span class="line">    <span class="comment">//BUILD_SHARED_LIBRARY：是Build System提供的一个变量，指向一个GNU Makefile Script。</span></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">BUILD_STATIC_LIBRARY：		<span class="comment">//编译为静态库。</span></span><br><span class="line">BUILD_SHARED_LIBRARY ：		<span class="comment">//编译为动态库</span></span><br><span class="line">BUILD_EXECUTABLE：			<span class="comment">//编译为Native C可执行程序 </span></span><br></pre></td></tr></table></figure>

<h3 id="条件判断"><a href="#条件判断" class="headerlink" title="条件判断"></a>条件判断</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">#方法一</span><br><span class="line">ifeq($&#123;var&#125;,value)</span><br><span class="line">    statement1</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    statement2</span><br><span class="line">end</span><br><span class="line">    </span><br><span class="line">#方法二</span><br><span class="line"><span class="keyword">if</span> (var STRWQUAL <span class="string">&quot;value&quot;</span>)</span><br><span class="line">    statement1</span><br><span class="line"><span class="keyword">else</span>()</span><br><span class="line">    statement2</span><br><span class="line">endif()</span><br><span class="line">    </span><br></pre></td></tr></table></figure>

<h3 id="notice"><a href="#notice" class="headerlink" title="notice"></a>notice</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//在manhattan中, 将库文件装载到TARGET_SYSROOT/usr/lib下才会被其他库文件所引用加载</span><br><span class="line">//样例可见 smartpen/package/apps/libdualmic/Build.mk</span><br><span class="line">LOCAL_MODULE_PATH :=$(TARGET_SYSROOT)/usr/lib</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>cmake</category>
      </categories>
      <tags>
        <tag>Cmake</tag>
        <tag>complie</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2022/08/20/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><p>百度：<a href="https://www.baidu.com/">https://www.baidu.com</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
</search>
